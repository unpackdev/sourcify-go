package sourcify

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

func TestGetContractByChainIdAndAddress(t *testing.T) {
	response := ContractResponse{
		Abi: []ABIEntry{
			{
				Name:            "retrieve",
				Type:            "function",
				Inputs:          []ABIParameter{},
				Outputs:         []ABIParameter{{Name: "", Type: "uint256", InternalType: "uint256"}},
				StateMutability: "view",
			},
			{
				Name:            "store",
				Type:            "function",
				Inputs:          []ABIParameter{{Name: "num", Type: "uint256", InternalType: "uint256"}},
				Outputs:         []ABIParameter{},
				StateMutability: "nonpayable",
			},
		},
		MatchID:       "27351",
		CreationMatch: "exact_match",
		RuntimeMatch:  "exact_match",
		VerifiedAt:    "2024-08-08T10:31:58Z",
		ChainID:       "11155111",
		Address:       "0x2738d13E81e30bC615766A0410e7cF199FD59A83",
		CreationBytecode: Bytecode{
			OnchainBytecode:    "0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e565b005b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033",
			RecompiledBytecode: "0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e575b600080fd5b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033",
			SourceMap:          "141:356:0:-:0;;;;;;;;;;;;;;;;;;;",
		},
		RuntimeBytecode: RuntimeBytecode{
			OnchainBytecode:    "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e575b600080fd5b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033",
			RecompiledBytecode: "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100d9565b60405180910390f35b610073600480360381019061006e919061009d565b61007e575b600080fd5b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b6100d3816100f4565b82525050565b60006020820190506100ee60008301846100ca565b92915050565b6000819050919050565b600080fd5b61010c816100f4565b811461011757600080fd5b5056fea2646970667358221220404e37f487a89a932dca5e77faaf6ca2de3b991f93d230604b1b8daaef64766264736f6c63430008070033",
			SourceMap:          "141:356:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;416:79;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;271:64;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;416:79;457:7;482:6;;475:13;;416:79;:::o;271:64::-;325:3;316:6;:12;;;;271:64;:::o;7:139:1:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:329::-;211:6;260:2;248:9;239:7;235:23;231:32;228:119;;;266:79;;:::i;:::-;228:119;386:1;411:53;456:7;447:6;436:9;432:22;411:53;:::i;:::-;401:63;;357:117;152:329;;;;:::o;487:118::-;574:24;592:5;574:24;:::i;:::-;569:3;562:37;487:118;;:::o;611:222::-;704:4;742:2;731:9;727:18;719:26;;755:71;823:1;812:9;808:17;799:6;755:71;:::i;:::-;611:222;;;;:::o;920:77::-;957:7;986:5;975:16;;920:77;;;:::o;1126:117::-;1235:1;1232;1225:12;1249:122;1322:24;1340:5;1322:24;:::i;:::-;1315:5;1312:35;1302:63;;1361:1;1358;1351:12;1302:63;1249:122;:::o",
		},
		Deployment: Deployment{
			TransactionHash:  "0x468d0379e6b16c39cc2e821a9c15d986586fb2e923df2ce9d745c57ff7c486b6",
			BlockNumber:      "783919",
			TransactionIndex: "0",
			Deployer:         "0xAA6042aa65eb93C6439cDaeBC27B3bd09c5DFe94",
		},
	}

	mockServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Println(r.URL.Path)
		if r.URL.Path == "/v2/contract/1115511/0x2738d13E81e30bC615766A0410e7cF199FD59A83" {
			// Simulate a successful response with sample source code
			err := json.NewEncoder(w).Encode(&response)
			if err != nil {
				t.Errorf("failed to encode mock source codes: %v", err)
			}
		} else {
			http.NotFound(w, r)
		}
	}))
	defer mockServer.Close()

	// Create a client for the mock server
	client := NewClient(WithBaseURL(mockServer.URL))

	// Define test data
	chainID := 1115511
	contractAddress := common.HexToAddress("0x2738d13E81e30bC615766A0410e7cF199FD59A83")

	// Call the function to get contract source code
	contractResponse, err := GetContractByChainIdAndAddress(client, chainID, contractAddress, []string{}, []string{})

	// Verify the results
	assert.NoError(t, err, "GetContractByChainIdAndAddress returned an error")

	assert.Equal(t, &response, contractResponse, "GetContractByChainIdAndAddress returned unexpected source codes")
}
